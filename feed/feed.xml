<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="pretty-atom-feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko">
  <title>selinakk.github.io</title>
  <subtitle>selinakk&#39;s Github Pages</subtitle>
  <link href="https://selinakk.github.io/feed/feed.xml" rel="self" />
  <link href="https://selinakk.github.io/" />
  <updated>2024-10-29T00:00:00Z</updated>
  <id>https://selinakk.github.io/</id>
  <author>
    <name>selinakk</name>
  </author>
  <entry>
    <title>정적인 웹과 동적인 웹의 차이 - static vs dynamic website</title>
    <link href="https://selinakk.github.io/blog/staticNdynamic/" />
    <updated>2024-10-29T00:00:00Z</updated>
    <id>https://selinakk.github.io/blog/staticNdynamic/</id>
    <content type="html">&lt;p&gt;개발을 하다 보면 웹을 정의하는 두 가지 개념을 접하게 됩니다&lt;br&gt;
바로 static과 dynamic입니다&lt;br&gt;
두 개념은 웹 설계/배포과정에서 구분이 됩니다&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;static&quot;&gt;static 웹이란?&lt;/h2&gt;
&lt;p&gt;정적 웹 페이지에 접근하는 모든 사용자는 동일한 컨텐츠를 보게 됩니다&lt;br&gt;
정적 웹은 주로 HTML, CSS, Javascript를 사용하여 구축되며 서버 측 프로그램이나 애플리케이션이 실행되지 않습니다&lt;br&gt;
정적인 웹에서는 &lt;strong&gt;사용자가 웹 페이지를 업데이트 할 수 없습니다&lt;/strong&gt;&lt;br&gt;
콘텐츠가 자주 변경되지 않는 랜딩 페이지, 포트폴리오와 같은 간단한 웹사이트가 정적 웹페이지에 적합합니다&lt;br&gt;
정적인 웹 호스팅을 지원하는 서비스로는 Github Pages, Vercel 등이 있습니다&lt;br&gt;
지금 이 블로그가 정적인 웹사이트입니다 정적이라 웹에서 직접 글 수정이 불가합니다&lt;br&gt;
정적 컨텐츠를 수정해서 레포지토리로 푸시를 하면 자동 배포를 통해 수정이 이루어집니다&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;dynamic&quot;&gt;dynamic 웹이란?&lt;/h2&gt;
&lt;p&gt;사용자의 입력이나 시간 등에 따라 웹 페이지의 내용이 달라질 수 있습니다&lt;br&gt;
사용자 입력에 따라 즉시 콘텐츠를 생성하고 업데이트된 정보를 제공합니다 = 즉, &lt;strong&gt;사용자가 웹의 상태를 바꿀 수 있습니다&lt;/strong&gt;&lt;br&gt;
동적 웹페이지는 Ajax, JSP, ASP 등의 기술을 사용하여 구축됩니다 Spring에서 dynamic web project를 볼 수 있죠&lt;br&gt;
동적인 웹은 일반적으로 정적인 웹보다 개발 및 호스팅 비용이 많이 들고 속도가 느릴 가능성이 있습니다&lt;br&gt;&lt;/p&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://selinakk.github.io/blog/staticNdynamic/F9BhAPq172-666.avif 666w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://selinakk.github.io/blog/staticNdynamic/F9BhAPq172-666.webp 666w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://selinakk.github.io/blog/staticNdynamic/F9BhAPq172-666.png&quot; alt=&quot;static vs dynamic web flow chart&quot; width=&quot;666&quot; height=&quot;442&quot;&gt;&lt;/picture&gt;
출처 GeeksForGeeks
&lt;br&gt;&lt;br&gt;
static 웹은 브라우저가 HTTP 요청을 보내면 웹 서버가 바로 HTML 파일을 전달합니다 따라서 HTTP REQUEST(요청)와 HTTP RESPONSE(응답)만 수행됩니다&lt;br&gt;
서버가 단순히 요청된 파일을 반환하기 때문에 추가적인 프로그램 실행이 필요하지 않습니다&lt;br&gt;
&lt;br&gt;
반면 dynamic 웹 페이지는 요청이 들어오면, 웹 서버가 요청을 받아 애플리케이션 프로그램을 실행하여 HTML 출력을 생성합니다 따라서 1단계에서 4단계까지 모든 단계가 수행됩니다&lt;br&gt;
HTTP 요청 → 애플리케이션 프로그램 호출 → 프로그램 실행 및 결과 생성 → HTTP 응답&lt;br&gt;&lt;br&gt;
&lt;p&gt;블로그로 다시 예를 들어보면&lt;br&gt;
사용자가 블로그 상태를 실시간으로 변경할 수 없는 Github Pages는 정적인 웹이고,&lt;br&gt;
사용자가 실시간으로 글을 관리하거나 댓글을 남길 수 있는 티스토리 블로그는 동적이라고 할 수 있습니다&lt;br&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>스프링부트에서 SQL 로그 출력하기 - logback, log4jdbc</title>
    <link href="https://selinakk.github.io/blog/howToLogSql/" />
    <updated>2024-10-24T00:00:00Z</updated>
    <id>https://selinakk.github.io/blog/howToLogSql/</id>
    <content type="html">&lt;p&gt;환경: macOS, Spring Boot 3.3.4, Tomcat 10.1.31 (Maven 프로젝트)&lt;br&gt;&lt;br&gt;
검색을 실행했을 때 목록에는 2건이 출력되는데, 결과 건수는 3개가 카운트되어서 쿼리가 어떻게 처리가 되는지 궁금했다&lt;br&gt;
처음에 구현했을 때는 잘됐는데 테이블을 조인하다 보니 어디선가 꼬인 것 같다&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;SQL 로그를 출력하는 방법을 열심히 검색&lt;br&gt;
이것저것 따라해 보고 성공
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-logback&quot;&gt;방법1: logback&lt;/h2&gt;
&lt;p&gt;src/main/resources에 &lt;strong&gt;logback-spring.xml(혹은 logback.xml)&lt;/strong&gt; 파일 생성&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//중요한 건 패키지명을 본인 프로젝트에 맞게 변경해야 함 (&amp;lt;logger name=&quot;com.tmtb.pageon&quot; 이 부분)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;xml version&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1.0&quot;&lt;/span&gt; encoding&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;configuration debug&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;appender name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;console&quot;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;ch.qos.logback.core.ConsoleAppender&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;encoder&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;charset&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;UTF&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;charset&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Pattern&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;d &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;5p &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;m&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Pattern&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;encoder&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;appender&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;logger name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;com.tmtb.pageon&quot;&lt;/span&gt; level&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;DEBUG&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;appender&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ref ref&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;console&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;logger&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;logger name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;jdbc.sqlonly&quot;&lt;/span&gt; level&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;INFO&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;appender&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ref ref&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;console&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;logger&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;logger name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;jdbc.resultsettable&quot;&lt;/span&gt; level&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;INFO&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;appender&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ref ref&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;console&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;logger&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;configuration&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 실행하면 SQL 쿼리가 찍힌다!
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/QDb34FmZiQ-1280.avif 1280w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/QDb34FmZiQ-1280.webp 1280w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://selinakk.github.io/blog/howToLogSql/QDb34FmZiQ-1280.png&quot; alt=&quot;SQL log by logback&quot; width=&quot;1280&quot; height=&quot;142&quot;&gt;&lt;/picture&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-log4jdbc-log4j2&quot;&gt;방법2: log4jdbc-log4j2&lt;/h2&gt;
&lt;h3 id=&quot;log4jdbc-log4j2-sql&quot;&gt;log4jdbc-log4j2로 콘솔에 가독성 좋은 테이블 형태로 SQL 실행 결과를 출력할 수 있게 해 본다&lt;/h3&gt;
&lt;p&gt;저는 Maven 빌드라 &lt;strong&gt;pom.xml에 log4jdbc-log4j2 의존성&lt;/strong&gt;을 추가&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;dependency&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;bgee&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log4jdbc&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;log4j2&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;groupId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;log4jdbc&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;log4j2&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;jdbc4&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;artifactId&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;version&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1.16&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;version&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;dependency&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그다음은 src/main/resources/&lt;strong&gt;application.properties&lt;/strong&gt; 파일에 아래의 내용을 추가한다&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;spring&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datasource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;driver&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log4jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jdbcapi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;DriverSpy
spring&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datasource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;jdbc&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;log4jdbc&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;mysql&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;localhost&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;your_database
spring&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datasource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;username&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;사용자명
spring&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datasource&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;사용자비번

logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sqlonly&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DEBUG&lt;/span&gt;
logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sqltiming&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INFO&lt;/span&gt;
logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resultsettable&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INFO&lt;/span&gt;
logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;audit&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OFF&lt;/span&gt;
logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resultset&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OFF&lt;/span&gt;
logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OFF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;설정하면 이런 모습이다
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/92YDg15IwS-1280.avif 1280w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/92YDg15IwS-1280.webp 1280w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://selinakk.github.io/blog/howToLogSql/92YDg15IwS-1280.png&quot; alt=&quot;application.properties 내 log4jdbc 설정&quot; width=&quot;1280&quot; height=&quot;788&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;url에 주목하시라
기존의 spring,datasource.url이&lt;br&gt;
jdbc:mysql://localhost:3306/your_database 이었다면&lt;br&gt;
jdbc:&lt;strong&gt;log4jdb:c&lt;/strong&gt;mysql://localhost:3306/your_database&lt;br&gt;
이렇게 **log4jdbc:**가 추가되면 된다 Mysql 외에 다른 DBMS도 거의 동일&lt;/p&gt;
&lt;p&gt;그리고 src/main/resources/&lt;strong&gt;log4jdbc.log4j2.properties&lt;/strong&gt; 파일도 필요하다 내용은 아래 두줄이다&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;log4jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;spylogdelegator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;net&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log4jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;slf4j&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Slf4jSpyLogDelegator
log4jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dump&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;maxlinelength&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 내용을 그냥 application.properties에 몰아넣었더니 이상하게 log4jdbc 설정 속성들이 안 먹어서 순순히 log4jdbc.log4j2.properties로 분리했다&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;다시 application.properties로 돌아가서 log4jdbc 설정을 살펴보겠다&lt;br&gt;
logging.level.jdbc.sqlonly=DEBUG
&lt;strong&gt;logging.level.jdbc.sqltiming=INFO
logging.level.jdbc.resultsettable=INFO&lt;/strong&gt;
이 세 라인이 중요하다&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;sqlonly=DEBUG는 아래와 같이 파라미터를 포함한 쿼리문을 보여주고
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/JdpYYuTgWo-1280.avif 1280w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/JdpYYuTgWo-1280.webp 1280w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://selinakk.github.io/blog/howToLogSql/JdpYYuTgWo-1280.png&quot; alt=&quot;sqlonly log&quot; width=&quot;1280&quot; height=&quot;277&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;sqltiming=INFO는 쿼리문+쿼리 실행에 소요된 시간 {executed in ..}
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/30KkR13ajV-1280.avif 1280w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/30KkR13ajV-1280.webp 1280w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://selinakk.github.io/blog/howToLogSql/30KkR13ajV-1280.png&quot; alt=&quot;sqltiming log&quot; width=&quot;1280&quot; height=&quot;498&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;resultsettable=INFO는 쿼리 실행 결과를 테이블로 보여준다
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/sPhFKDCejE-1280.avif 1280w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/sPhFKDCejE-1280.webp 1280w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://selinakk.github.io/blog/howToLogSql/sPhFKDCejE-1280.png&quot; alt=&quot;resultset table log&quot; width=&quot;1280&quot; height=&quot;397&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;다만 실행 쿼리문이 sqlonly, sqltiming에서 중복으로 출력되기 때문에
나는 &lt;strong&gt;logging.level.jdbc.sqlonly=OFF (OFF로 명시적으로 비활성화해야 함)로 바꿨다&lt;/strong&gt;&lt;br&gt;
이렇게 하면 sqltiming에서 쿼리문이 실행시간과 함께 한 번만 출력된다&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;마찬가지로 OFF를 해두는 게 좋은 나머지 세 가지를 보면&lt;/p&gt;
&lt;pre class=&quot;language-js&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;audit&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OFF&lt;/span&gt;
logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resultset&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OFF&lt;/span&gt;
logging&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;level&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jdbc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;connection&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;OFF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OFF가 가득한 게 왠지 생략할 수 있을 것 같이 생겼다&lt;br&gt;
하지만 저 세 라인을 빼는 순간 엄청 빼곡한 로그가 밀려온다&lt;br&gt;&lt;/p&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/4pr-8Ivzxf-1280.avif 1280w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/4pr-8Ivzxf-1280.webp 1280w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://selinakk.github.io/blog/howToLogSql/4pr-8Ivzxf-1280.png&quot; alt=&quot;audit, resultset log&quot; width=&quot;1280&quot; height=&quot;596&quot;&gt;&lt;/picture&gt;
아무래도 나노단위의 SQL 디버깅이 필요한 경우에만 활성화하는 게 좋겠다&lt;br&gt;&lt;br&gt;
&lt;p&gt;최종적으로 이런 모습이다&lt;br&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/WnM8JT6H8E-1280.avif 1280w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://selinakk.github.io/blog/howToLogSql/WnM8JT6H8E-1280.webp 1280w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://selinakk.github.io/blog/howToLogSql/WnM8JT6H8E-1280.png&quot; alt=&quot;sqltiming+result set table log&quot; width=&quot;1280&quot; height=&quot;1188&quot;&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;일부 컬럼이 [unread]로 나오는 이유는 ResultSet이 실제로 읽히지 않은 컬럼을 [unread]로 표시하는 log4jdbc의 특성이라고 한다&lt;br&gt;
디버깅 차원에서는 무시해도 될 것 같다&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;정리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;logback&lt;/strong&gt;: 일반적인 로깅을 처리하면서, SQL 쿼리 로그도 함께 관리할 수 있습니다. 기본 로그 및 다양한 애플리케이션 이벤트를 포함한 로깅이 가능하므로 프로젝트 전반적인 로그 관리에 유리합니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;log4jdbc-log4j2&lt;/strong&gt;: SQL 쿼리와 결과를 테이블 형식으로 출력하고, 쿼리 실행 시간, 파라미터, 그리고 결과 테이블을 좀 더 가독성 있게 출력하는 데 유용합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;SQL 로그만 필요하면 후자를, 전반적인 로그가 필요하면 전자를 적용하는 게 좋을 듯&lt;br&gt;
두 개를 같이 사용한다면 logback에서 sql로그를 최소화해 중복을 줄이는 것이 바람직하겠다&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>맥북 액정 수리비가 116만원이라고요?</title>
    <link href="https://selinakk.github.io/blog/repairOrNot/" />
    <updated>2024-10-11T00:00:00Z</updated>
    <id>https://selinakk.github.io/blog/repairOrNot/</id>
    <content type="html">&lt;p&gt;평소대로 노트북을 사용하던 중 갑자기 노트북 화면이 검어지더니 먹통이 됐다&lt;br&gt;
수차례 강제종료 하고 다시 켜봐도 똑같다&lt;br&gt;
부팅음은 나는데 화면이 까매.. 왜 안 켜져?&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;애플에 고장 문의를 했는데 상담원이 알려준 대로 전원버튼을 길게 눌러 시동옵션을 시도해 봐도 안 먹힌다&lt;br&gt;
최종 프로젝트 이제 코딩 들어가야 하는데 환장&lt;br&gt;&lt;/p&gt;
&lt;p&gt;결국 수리 예약 후 공식 서비스센터인 ANTZ에 다녀왔다&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;다녀오기만 했다&lt;br&gt;
수리 견적 116만 7천 원이 나왔기 때문이다&lt;br&gt;
엔지니어분이 부팅은 된다며 외부 디스플레이에 직접 꽂아서 보여주셨다 디스플레이가 문제라고 했다&lt;br&gt;
더 큰 문제는 액정만 쏙 갈면 되는 게 아니라 디스플레이를 바꾸려면 윗판+힌지 이렇게 다 갈아야 한다는 것&lt;br&gt;
최종 문제는 그 비용이 116만 원이 넘는다는 것&lt;br&gt;
철 한참 지난 OTL을 쓰고 싶은 심정&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;수리를 할지, 윈도우 노트북을 새로 살지 가성비를 따져보는 시간이 필요하다&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Selina?</title>
    <link href="https://selinakk.github.io/blog/whySelina/" />
    <updated>2024-10-09T00:00:00Z</updated>
    <id>https://selinakk.github.io/blog/whySelina/</id>
    <content type="html">&lt;p&gt;외국에 잠깐 살았을 때 영어 이름을 본명 끝 글자로 했더니 외국인들이 발음을 어려워했다&lt;br&gt;
정정해 주기도 귀찮고 되묻는 경우도 많아서 현지 이름을 만들게 됐다&lt;br&gt;
내 이름 ㅅ에 맞춰 S로 시작하는 영어 이름 몇 개를 추려서 투표를 받았는데 그 결과가 셀리나다&lt;br&gt;
(Selena는 너무 저스틴 비버 구여자친구 이름 같아서 모음 하나를 바꿔 Selina로 함)&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;여기는 한국이지만 적당한 익명성+애착이 있어 웹상에서 사용하고 있다&lt;br&gt;&lt;/p&gt;
&lt;picture&gt;&lt;source type=&quot;image/avif&quot; srcset=&quot;https://selinakk.github.io/blog/whySelina/l-BZhcs5eu-454.avif 454w&quot;&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://selinakk.github.io/blog/whySelina/l-BZhcs5eu-454.webp 454w&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://selinakk.github.io/blog/whySelina/l-BZhcs5eu-454.png&quot; alt=&quot;Miss Selina Kim&quot; width=&quot;454&quot; height=&quot;340&quot;&gt;&lt;/picture&gt;
</content>
  </entry>
</feed>